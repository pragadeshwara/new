name: Deploy Azure Resources

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: "Name of the Resource Group"
        required: true
        default: "tv-infra"
      location:
        description: "Azure Region for Resources"
        required: true
        default: "uksouth"
      environment_setup:
        description: "Create a new environment setup"
        required: true
        default: "false"
      environment:
        description: "Environment name"
        required: true
        default: "dev"

jobs:
  deploy-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set User Inputs as Environment Variables
        run: |
          echo "RESOURCE_GROUP=${{ github.event.inputs.resource_group }}" >> $GITHUB_ENV
          echo "LOCATION=${{ github.event.inputs.location }}" >> $GITHUB_ENV
          echo "ENVIRONMENT_SETUP=${{ github.event.inputs.environment_setup }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Deploy Azure Resources
        run: |
          function deploy_resource_group() {
            az group create --name "$RESOURCE_GROUP" --location "$LOCATION"
          }

          function deploy_keyvault() {
            PGSQL_PASSWORD=$(openssl rand -base64 32)
            echo "Deploying Key Vault..."
            keyvaultOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-keyvault.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              pgDbPassword=$PGSQL_PASSWORD \
              --query "properties.outputs.keyVaultName-name.value" -o tsv)
            echo "KEYVAULT_NAME=${keyvaultOutput}" >> $GITHUB_ENV
          }

          function deploy_nsg() {
            echo "Deploying Network Security Group..."
            nsgOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-nsg.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              --query "properties.outputs.nsg-name.value" -o tsv)
            echo "NSG_NAME=${nsgOutput}" >> $GITHUB_ENV
          }

          function deploy_vnet() {
            echo "Deploying Virtual Network..."
            vnetOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-vnet.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              nsg-name=$NSG_NAME \
              --query "properties.outputs.vnet-name.value" -o tsv)
            echo "VNET_NAME=${vnetOutput}" >> $GITHUB_ENV
          }

          function deploy_postgres() {
            echo "Deploying PostgreSQL SERVER..."
            postgresOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-postgres.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              --query "properties.outputs.postgres-server-name.value" -o tsv)
            echo "POSTGRES_SERVER_NAME=${postgresOutput}" >> $GITHUB_ENV
          }

          function deploy_storage() {
            echo "Deploying Storage Account..."
            storageOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-storage.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              --query "properties.outputs.storage-account-name.value" -o tsv)
            echo "STORAGE_ACCOUNT_NAME=${storageOutput}" >> $GITHUB_ENV
          }

          function deploy_acr() {
            echo "Deploying Azure Container Registry..."
            acrOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-acr.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              --query "properties.outputs.acr-name.value" -o tsv)
            echo "ACR_NAME=${acrOutput}" >> $GITHUB_ENV
          }

          function deploy_comm_service() {
            echo "Deploying Communication Service..."
            commServiceOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-comm-service.json \
              --parameters environment=$ENVIRONMENT \
              --query "properties.outputs.comm-service-name.value" -o tsv)
            echo "COMM_SERVICE_NAME=${commServiceOutput}" >> $GITHUB_ENV
          }

          function deploy_maps_account() {
            echo "Deploying Maps Account..."
            mapsAccountOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-maps-account.json \
              --parameters environment=$ENVIRONMENT \
              --query "properties.outputs.maps-account-name.value" -o tsv)
            echo "MAPS_ACCOUNT_NAME=${mapsAccountOutput}" >> $GITHUB_ENV
          }

          function deploy_app_service_plan() {
            echo "Deploying App Service Plan..."
            appServicePlanOutput=$(az deployment group create --resource-group $RESOURCE_GROUP \
              --template-file tv-infra-service.json \
              --parameters location=$LOCATION environment=$ENVIRONMENT \
              --query "properties.outputs.app-service-plan-name.value" -o tsv)
            echo "APP_SERVICE_PLAN_NAME=${appServicePlanOutput}" >> $GITHUB_ENV
          }

          if [ "$ENVIRONMENT_SETUP" = "true" ]; then
            deploy_resource_group
            deploy_keyvault
            deploy_nsg
            deploy_vnet
            deploy_postgres
            deploy_storage
            deploy_acr
            deploy_comm_service
            deploy_maps_account
            deploy_app_service_plan          
          fi

      - name: Ensure All Resources Deployed
        run: |
          declare -A expected_resources=(
            ["Microsoft.KeyVault/vaults"]="keyvaultOutput"
            ["Microsoft.DBforPostgreSQL/servers"]="postgresOutput"
            ["Microsoft.Network/virtualNetworks"]="vnetOutput"
            ["Microsoft.Network/networkSecurityGroups"]="nsgOutput"
            ["Microsoft.Storage/storageAccounts"]="storageOutput"
            ["Microsoft.ContainerRegistry/registries"]="acrOutput"
            ["Microsoft.Communication/CommunicationServices"]="commServiceOutput"
            ["Microsoft.Maps/accounts"]="mapsOutput"
            ["Microsoft.Web/serverfarms"]="appServicePlanOutput"
          )

          for type in "${!expected_resources[@]}"; do
            output_name=${expected_resources[$type]}
            resource_id=$(az deployment group show --resource-group $RESOURCE_GROUP --query "properties.outputs.$output_name.value" -o tsv)

            if [ -z "$resource_id" ]; then
              echo "Resource missing: Type=$type"
              case $type in
                "Microsoft.KeyVault/vaults")
                  deploy_keyvault
                  ;;
                "Microsoft.DBforPostgreSQL/servers")
                  deploy_postgres
                  ;;
                "Microsoft.Network/virtualNetworks")
                  deploy_vnet
                  ;;
                "Microsoft.Network/networkSecurityGroups")
                  deploy_nsg
                  ;;
                "Microsoft.Storage/storageAccounts")
                  deploy_storage
                  ;;
                "Microsoft.ContainerRegistry/registries")
                  deploy_acr
                  ;;
                "Microsoft.Communication/CommunicationServices")
                  deploy_comm_service
                  ;;
                "Microsoft.Maps/accounts")
                  deploy_maps_account
                  ;;
                "Microsoft.Web/serverfarms")
                  deploy_app_service_plan
                  ;;
                *)
                  echo "Unknown resource type: $type"
                  ;;
              esac
            else
              echo "Resource exists: Type=$type, ID=$resource_id"
            fi
          done          
          

      - name: Deploy tv-app-Server using ARM template
        run: |
          echo "Deploying tv-app-Server using ARM template..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/tv-app-server-template.json \
            --parameters webAppName=tv-app-Server-${{ env.ENVIRONMENT }} \
                          location=${{ env.LOCATION }} \
                          appServicePlanName=${APP_NAME}-plan \
                          dbConnectionString="Server=${PGSQL_SERVER_NAME};UserId=$PGSQL_USERNAME;Password=$PGSQL_PASSWORD" \
                          keyVaultUrl=https://${KEYVAULT_NAME}.vault.azure.net

      - name: Deploy vault-Server using ARM template
        run: |
          echo "Deploying vault-Server using ARM template..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/vault-server-template.json \
            --parameters webAppName=vault-Server-${{ env.ENVIRONMENT }} \
                          location=${{ env.LOCATION }} \
                          appServicePlanName=${APP_NAME}-plan \
                          dbConnectionString="Server=${PGSQL_SERVER_NAME};UserId=$PGSQL_USERNAME;Password=$PGSQL_PASSWORD" \
                          storageAccountName=${STORAGE_NAME} \
                          keyVaultUrl=https://${KEYVAULT_NAME}.vault.azure.net

      - name: Deploy Support-Server using ARM template
        run: |
          echo "Deploying Support-Server using ARM template..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/support-server-template.json \
            --parameters webAppName=Support-Server-${{ env.ENVIRONMENT }} \
                          location=${{ env.LOCATION }} \
                          appServicePlanName=${APP_NAME}-plan \
                          commServiceEndpoint=$(az communication list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='$COMM_NAME'].properties.serviceUrl" -o tsv) \
                          server1Endpoint=https://tv-app-Server-${{ env.ENVIRONMENT }}.azurewebsites.net

      - name: Deploy admin-portal using ARM template
        run: |
          echo "Deploying admin-portal using ARM template..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/admin-portal-template.json \
            --parameters webAppName=admin-portal-${{ env.ENVIRONMENT }} \
                          location=${{ env.LOCATION }} \
                          appServicePlanName=${APP_NAME}-plan

      - name: Deploy police-portal using ARM template
        run: |
          echo "Deploying police-portal using ARM template..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/police-portal-template.json \
            --parameters webAppName=police-portal-${{ env.ENVIRONMENT }} \
                          location=${{ env.LOCATION }} \
                          appServicePlanName=${APP_NAME}-plan

      - name: Validate Deployments
        run: |
          for server in tv-app-server vault-server support-server admin-portal police-portal; do
            echo "Validating deployment for $server-${{ env.ENVIRONMENT }}..."
            status=$(az webapp show --name $server-${{ env.ENVIRONMENT }} --resource-group ${{ env.RESOURCE_GROUP }} --query state -o tsv)
            if [ "$status" != "Running" ]; then
              echo "Error: $server-${{ env.ENVIRONMENT }} is not running."
              exit 1
            fi
          done
					
      - name: API Gateway Deployment
        run: |
          echo "Deploying API Gateway for Authentication..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/api-gateway-template.json \
            --parameters location=${{ env.LOCATION }} \
                        resourceGroup=${{ env.RESOURCE_GROUP }} \
                        environment=${{ env.ENVIRONMENT }} \
                        loadBalancerFrontendIP=$API_GATEWAY_IP \
                        server1IPAddress=$SERVER1_IP \
                        server3IPAddress=$SERVER3_IP

      - name: Load Balancer Deployment
        run: |   
          echo "Deploying Load Balancer for Traffic Distribution..."
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./templates/load-balancer-template.json \
            --parameters location=${{ env.LOCATION }} \
                        resourceGroup=${{ env.RESOURCE_GROUP }} \
                        environment=${{ env.ENVIRONMENT }} \
                        frontendIP=$LB_FRONTEND_IP \
                        backendPool="[
                          'https://tv-app-Server-${{ env.ENVIRONMENT }}',
                          'https://support-Server-${{ env.ENVIRONMENT }}'
                        ]"
