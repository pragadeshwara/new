name: Deploy Azure Resources

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: "Name of the Resource Group"
        required: true
        default: "default-rg"
      location:
        description: "Azure Region for Resources"
        required: true
        default: "eastus"
      environment_setup:
        description: "Create a new environment setup"
        required: true
        default: "false"
      environment:
        description: "Environment name"
        required: true
        default: "dev"

jobs:
  deploy-resources:
    runs-on: ubuntu-latest
    steps:
			- name: Azure Login
				uses: azure/login@v1
				with:
					creds: ${{ secrets.AZURE_CREDENTIALS }}

			- name: Set User Inputs as Environment Variables
				run: |
					echo "RESOURCE_GROUP=${{ github.event.inputs.resource_group }}" >> $GITHUB_ENV
					echo "LOCATION=${{ github.event.inputs.location }}" >> $GITHUB_ENV
					echo "ENVIRONMENT_SETUP=${{ github.event.inputs.environment_setup }}" >> $GITHUB_ENV
					echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        
      - name: Deploy Azure Resources
          deploy_resource_group() 
					{
            az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          }

          deploy_app()
					{
            APP_ID=$(az ad app create --display-name $APP_NAME --query appId -o tsv)
            SP_SECRET=$(az ad sp create --id $APP_ID --query password -o tsv)
          }

					deploy_keyvault() 
					{
						PGSQL_PASSWORD=$(openssl rand -base64 32)
						echo "Deploying Key Vault..."
						keyvaultOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
								--template-file tv-infra-keyvault.json \
								--parameters location=${{ env.LOCATION }} \
															environment=${{ env.ENVIRONMENT }} \
															clientId=$APP_ID \
															clientSecret=$SP_SECRET \
															pgDbUsername=$PGSQL_USERNAME \
															pgDbPassword=$PGSQL_PASSWORD \
								--query "properties.outputs.keyVaultName-name.value" -o tsv)
						echo "keyVaultName=${keyvaultOutput}" >> $GITHUB_ENV
					}

					deploy_nsg() 
					{
							echo "Deploying Network Security Group..."
							nsgOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-nsg.json \
									--parameters location=${{ env.LOCATION }} \
																environment=${{ env.ENVIRONMENT }} \
									--query "properties.outputs.nsg-name.value" -o tsv)
							echo "NSG_NAME=${nsgOutput}" >> $GITHUB_ENV
					}

					deploy_vnet() 
					{
							echo "Deploying Virtual Network..."
							vnetOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-vnet.json \
									--parameters location=${{ env.LOCATION }} \
																environment=${{ env.ENVIRONMENT }} \
																nsg-name=${{ env.NSG_NAME }} \
									--query "properties.outputs.vnet-name.value" -o tsv)
							echo "VNET_NAME=${vnetOutput}" >> $GITHUB_ENV
					}

					deploy_postgres() 
					{
							echo "Deploying PostgreSQL SERVER..."
							postgresOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-postgres.json \
									--parameters location=${{ env.LOCATION }} \
																environment=${{ env.ENVIRONMENT }} \
																adminUsername=$PGSQL_USERNAME \
																adminPassword=$PGSQL_PASSWORD \
									--query "properties.outputs.postgres-server-name.value" -o tsv)
							echo "POSTGRES_SERVER_NAME=${postgresOutput}" >> $GITHUB_ENV
					}

					deploy_storage() 
					{
							echo "Deploying Storage Account..."
							storageOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-storage.json \
									--parameters location=${{ env.LOCATION }} \
																environment=${{ env.ENVIRONMENT }} \
									--query "properties.outputs.storage-account-name.value" -o tsv)
							echo "STORAGE_ACCOUNT_NAME=${storageOutput}" >> $GITHUB_ENV
					}

					deploy_acr() 
					{
							echo "Deploying Azure Container Registry..."
							acrOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-acr.json \
									--parameters location=${{ env.LOCATION }} \
																environment=${{ env.ENVIRONMENT }} \
									--query "properties.outputs.acr-name.value" -o tsv)
							echo "ACR_NAME=${acrOutput}" >> $GITHUB_ENV
					}

					deploy_comm_service() 
					{
							echo "Deploying Communication Service..."
							commServiceOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-comm-service.json \
									--parameters environment=${{ env.ENVIRONMENT }} \
									--query "properties.outputs.comm-service-name.value" -o tsv)
							echo "COMM_SERVICE_NAME=${commServiceOutput}" >> $GITHUB_ENV
					}

					deploy_maps_account() 
					{
							echo "Deploying Maps Account..."
							mapsAccountOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-maps-account.json \
									--parameters environment=${{ env.ENVIRONMENT }} \
									--query "properties.outputs.maps-account-name.value" -o tsv)
							echo "MAPS_ACCOUNT_NAME=${mapsAccountOutput}" >> $GITHUB_ENV
					}

					deploy_app_service_plan() 
					{
							echo "Deploying App Service Plan..."
							appServicePlanOutput=$(az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file tv-infra-service.json \
									--parameters location=${{ env.LOCATION }} \
																environment=${{ env.ENVIRONMENT }} \
									--query "properties.outputs.app-service-plan-name.value" -o tsv)
							echo "APP_SERVICE_PLAN_NAME=${appServicePlanOutput}" >> $GITHUB_ENV
					}
        
					if [ "$ENVIRONMENT_SETUP" = "true" ]; then
						echo "Creating new resources..."
						deploy_resource_group
						deploy_app
						deploy_keyvault
						deploy_postgres
						deploy_vnet
						deploy_nsg
						deploy_storage
						deploy_acr
						deploy_comm_service
						deploy_maps_account
						deploy_app_service_plan

						echo "Validating existing resources..."

						declare -A expected_resources=(
							["Microsoft.KeyVault/vaults"]="keyvaultOutput"
							["Microsoft.DBforPostgreSQL/servers"]="postgresOutput"
							["Microsoft.Network/virtualNetworks"]="vnetOutput"
							["Microsoft.Network/networkSecurityGroups"]="nsgOutput"
							["Microsoft.Storage/storageAccounts"]="storageOutput"
							["Microsoft.ContainerRegistry/registries"]="acrOutput"
							["Microsoft.Communication/CommunicationServices"]="commServiceOutput"
							["Microsoft.Maps/accounts"]="mapsOutput"
							["Microsoft.Web/serverfarms"]="appServicePlanOutput"
						)

						# Retrieve the resource IDs from the deployment outputs
						for type in "${!expected_resources[@]}"; do
							output_name=${expected_resources[$type]}
							resource_id=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.outputs.$output_name.value" -o tsv)

							if [ -z "$resource_id" ]; then
						echo "Resource missing: Type=$type"
						case $type in
							"Microsoft.KeyVault/vaults")
								deploy_keyvault
								;;
							"Microsoft.DBforPostgreSQL/servers")
								deploy_postgres
								;;
							"Microsoft.Network/virtualNetworks")
								deploy_vnet
								;;
							"Microsoft.Network/networkSecurityGroups")
								deploy_nsg
								;;
							"Microsoft.Storage/storageAccounts")
								deploy_storage
								;;
							"Microsoft.ContainerRegistry/registries")
								deploy_acr
								;;
							"Microsoft.Communication/CommunicationServices")
								deploy_comm_service
								;;
							"Microsoft.Maps/accounts")
								deploy_maps_account
								;;
							"Microsoft.Web/serverfarms")
								deploy_app_service_plan
								;;
							*)
								echo "Unknown resource type: $type"
								;;
						esac
							else
						echo "Resource exists: Type=$type, ID=$resource_id"
							fi
						done
					fi

			- name: Deploy tv-app-Server using ARM template
				run: |
				echo "Deploying tv-app-Server using ARM template..."
				az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
					--template-file ./templates/tv-app-server-template.json \
					--parameters webAppName=tv-app-Server-${{ env.ENVIRONMENT }} \
											location=${{ env.LOCATION }} \
											appServicePlanName=${APP_NAME}-plan \
											dbConnectionString="Server=${PGSQL_SERVER_NAME};UserId=$PGSQL_USERNAME;Password=$PGSQL_PASSWORD" \
											keyVaultUrl=https://${KEYVAULT_NAME}.vault.azure.net

			- name: Deploy vault-Server using ARM template
				run: |
				echo "Deploying vault-Server using ARM template..."
				az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
					--template-file ./templates/vault-server-template.json \
					--parameters webAppName=vault-Server-${{ env.ENVIRONMENT }} \
											location=${{ env.LOCATION }} \
											appServicePlanName=${APP_NAME}-plan \
											dbConnectionString="Server=${PGSQL_SERVER_NAME};UserId=$PGSQL_USERNAME;Password=$PGSQL_PASSWORD" \
											storageAccountName=${STORAGE_NAME} \
											keyVaultUrl=https://${KEYVAULT_NAME}.vault.azure.net

			- name: Deploy Support-Server using ARM template
				run: |
				echo "Deploying Support-Server using ARM template..."
				az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
					--template-file ./templates/support-server-template.json \
					--parameters webAppName=Support-Server-${{ env.ENVIRONMENT }} \
											location=${{ env.LOCATION }} \
											appServicePlanName=${APP_NAME}-plan \
											commServiceEndpoint=$(az communication list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='$COMM_NAME'].properties.serviceUrl" -o tsv) \
											server1Endpoint=https://tv-app-Server-${{ env.ENVIRONMENT }}.azurewebsites.net


			- name: Deploy admin-portal using ARM template
				run: |
					echo "Deploying admin-portal using ARM template..."
					az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
				--template-file ./templates/admin-portal-template.json \
				--parameters webAppName=admin-portal-${{ env.ENVIRONMENT }} \
							location=${{ env.LOCATION }} \
							appServicePlanName=${APP_NAME}-plan

			- name: Deploy police-portal using ARM template
				run: |
					echo "Deploying police-portal using ARM template..."
					az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
				--template-file ./templates/police-portal-template.json \
				--parameters webAppName=police-portal-${{ env.ENVIRONMENT }} \
							location=${{ env.LOCATION }} \
							appServicePlanName=${APP_NAME}-plan

			- name: Validate Deployments
				run: |
					for server in tv-app-server vault-server support-server admin-portal police-portal; do
				echo "Validating deployment for $server-${{ env.ENVIRONMENT }}..."
				status=$(az webapp show --name $server-${{ env.ENVIRONMENT }} --resource-group ${{ env.RESOURCE_GROUP }} --query state -o tsv)
				if [ "$status" != "Running" ]; then
				echo "Error: $server-${{ env.ENVIRONMENT }} is not running."
				exit 1
				fi
					done
					
			- name: API gateway Deployment
				run: |
								echo "Deploying API Gateway for Authentication..."
								az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file ./templates/api-gateway-template.json \
									--parameters location=${{ env.LOCATION }} \
															resourceGroup=${{ env.RESOURCE_GROUP }} \
															environment=${{ env.ENVIRONMENT }}
											loadBalancerFrontendIP=$api_gateway_ip \
											server1IPAddress=$SERVER1_IP \
											server3IPAddress=$SERVER3_IP
																		
			- name: loadbalancer Deployment
				run: |   
								echo "Deploying Load Balancer for Traffic Distribution..."
								az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} \
									--template-file ./templates/load-balancer-template.json \
									--parameters 	location=${{ env.LOCATION }} \
																resourceGroup=${{ env.RESOURCE_GROUP }} \
																environment=${{ env.ENVIRONMENT }} \
																frontendIP=$LB_FRONTEND_IP \
																backendPool: [
																"https://tv-app-Server-${{ env.ENVIRONMENT }}",
																"https://support-Server-${{ env.ENVIRONMENT }}"
																]
